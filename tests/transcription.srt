1
00:00:00,000 --> 00:00:05,520
Docker, uno strumento in grado di comprimere il software in contenitori che funzionano in modo affidabile in qualsiasi ambiente.

2
00:00:05,520 --> 00:00:07,400
Ma cos’è un contenitore e perché ne hai bisogno?

3
00:00:07,400 --> 00:00:11,000
Immaginiamo che tu abbia creato un'app con COBOL che gira su uno strano sapore di Linux.

4
00:00:11,000 --> 00:00:14,000
Vuoi condividere questa app con il tuo amico, ma lui ha un sistema completamente diverso.

5
00:00:14,000 --> 00:00:17,560
Quindi il problema diventa: come possiamo replicare l'ambiente di cui il nostro software ha bisogno su qualsiasi altro?

6
00:00:17,560 --> 00:00:18,560
macchina?

7
00:00:18,560 --> 00:00:21,680
Un modo per creare un pacchetto di un'app è con una macchina virtuale, in cui l'hardware viene simulato,

8
00:00:21,680 --> 00:00:24,480
quindi installato con le dipendenze del sistema operativo richieste.

9
00:00:24,480 --> 00:00:27,160
Ciò ci consente di eseguire più app sulla stessa infrastruttura.

10
00:00:27,200 --> 00:00:32,160
Tuttavia, poiché ogni VM esegue il proprio sistema operativo, tendono ad essere ingombranti e lente.

11
00:00:32,160 --> 00:00:36,680
Ora, un contenitore Docker è concettualmente molto simile a una VM con una differenza fondamentale.

12
00:00:36,680 --> 00:00:40,440
Invece di virtualizzare l’hardware, i container virtualizzano solo il sistema operativo.

13
00:00:40,440 --> 00:00:44,600
O in altre parole, tutte le app o i contenitori sono gestiti da un unico kernel, e questo rende

14
00:00:44,600 --> 00:00:46,840
quasi tutto più veloce ed efficiente.

15
00:00:46,840 --> 00:00:49,840
Sono tre gli elementi fondamentali nell'universo di Docker.

16
00:00:49,840 --> 00:00:52,800
Il file Docker, l'immagine e il contenitore.

17
00:00:52,800 --> 00:00:54,600
Il file Docker è come il DNA.

18
00:00:54,600 --> 00:00:59,520
È solo il codice che dice a Docker come costruire un'immagine, che a sua volta è un'istantanea del tuo file

19
00:00:59,520 --> 00:01:03,360
software, insieme a tutte le sue dipendenze fino al livello del sistema operativo.

20
00:01:03,360 --> 00:01:07,240
L'immagine è immutabile e può essere utilizzata per avviare più contenitori, il che è tuo

21
00:01:07,240 --> 00:01:09,680
software reale in esecuzione nel mondo reale.

22
00:01:09,680 --> 00:01:13,840
Crea un file Docker e utilizza from per iniziare da un modello esistente come Ubuntu.

23
00:01:13,840 --> 00:01:17,640
Questa immagine di base viene estratta dal cloud e puoi anche caricare le tue immagini

24
00:01:17,640 --> 00:01:20,000
a una varietà di diversi registri Docker.

25
00:01:20,000 --> 00:01:23,720
Da lì, potresti voler utilizzare run per eseguire un comando terminale che installa le dipendenze

26
00:01:23,720 --> 00:01:24,720
nella tua immagine.

27
00:01:24,720 --> 00:01:27,880
Puoi impostare variabili di ambiente e fare tutti i tipi di altre cose, quindi l'ultima cosa

28
00:01:27,880 --> 00:01:31,680
quello che dovrai fare è impostare un comando predefinito che viene eseguito quando avvii un contenitore.

29
00:01:31,680 --> 00:01:35,040
E ora possiamo creare il file immagine eseguendo il comando build Docker.

30
00:01:35,040 --> 00:01:38,880
Esegue ogni passaggio del nostro file Docker per creare l'immagine livello per livello.

31
00:01:38,880 --> 00:01:42,800
Possiamo quindi dare vita a questa immagine come contenitore con il comando Docker run.

32
00:01:42,800 --> 00:01:47,000
Poiché la tua app richiede più risorse, puoi eseguirla su più macchine, più cloud,

33
00:01:47,000 --> 00:01:49,520
on-premise o dove vuoi in modo affidabile.

34
00:01:49,520 --> 00:01:51,520
Questo è stato Docker in 100 secondi.

35
00:01:51,520 --> 00:01:55,600
Se ti è piaciuto, assicurati di mettere mi piace e iscriverti e resta sintonizzato per altri contenuti Docker in arrivo

36
00:01:55,600 --> 00:01:56,800
presto su questo canale.

37
00:01:56,800 --> 00:01:58,920
Grazie per la visione e ci vediamo alla prossima.

