start	end	text
0	5520	Docker, a tool that can package software into containers that run reliably in any environment.
5520	7400	But what is a container, and why do you need one?
7400	11000	Let's imagine you built an app with COBOL that runs on some weird flavor of Linux.
11000	14000	You want to share this app with your friend, but he has an entirely different system.
14000	17560	So the problem becomes, how do we replicate the environment our software needs on any
17560	18560	machine?
18560	21680	One way to package an app is with a virtual machine, where the hardware is simulated,
21680	24480	then installed with the required OS dependencies.
24480	27160	This allows us to run multiple apps on the same infrastructure.
27200	32160	However, because each VM is running its own operating system, they tend to be bulky and slow.
32160	36680	Now, a Docker container is conceptually very similar to a VM with one key difference.
36680	40440	Instead of virtualizing hardware, containers only virtualize the OS.
40440	44600	Or in other words, all apps or containers are run by a single kernel, and this makes
44600	46840	almost everything faster and more efficient.
46840	49840	There are three fundamental elements in the universe of Docker.
49840	52800	The Docker file, the image, and the container.
52800	54600	The Docker file is like DNA.
54600	59520	It's just code that tells Docker how to build an image, which itself is a snapshot of your
59520	63360	software, along with all of its dependencies down to the operating system level.
63360	67240	The image is immutable, and it can be used to spin up multiple containers, which is your
67240	69680	actual software running in the real world.
69680	73840	Create a Docker file and use from to start from an existing template like Ubuntu.
73840	77640	This base image gets pulled down from the cloud, and you can also upload your own images
77640	80000	to a variety of different Docker registries.
80000	83720	From there, you might want to use run to run a terminal command that installs dependencies
83720	84720	into your image.
84720	87880	You can set environment variables and do all kinds of other stuff, then the last thing
87880	91680	you'll do is set a default command that's executed when you start up a container.
91680	95040	And now, we can create the image file by running the Docker build command.
95040	98880	It goes through each step in our Docker file to build the image layer by layer.
98880	102800	We can then bring this image to life as a container with the Docker run command.
102800	107000	As your app demands more resources, you can run it on multiple machines, multiple clouds,
107000	109520	on-prem, or wherever you want reliably.
109520	111520	This has been Docker in 100 seconds.
111520	115600	If you enjoyed it, make sure to like and subscribe, and stay tuned for more Docker content coming
115600	116800	to this channel soon.
116800	118920	Thanks for watching, and I will see you in the next one.
